{"version":3,"file":"contact.astro.mjs","sources":["../../../../src/pages/api/contact.ts"],"sourcesContent":["import nodemailer from 'nodemailer';\nimport 'dotenv/config';\nimport type { APIRoute } from 'astro';\n\n// Define types for the application\ntype Language = 'es' | 'en';\n\ninterface ContactFormData {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n  budget?: string;\n  language?: Language;\n}\n\n// Define prerender = false to enable server-side API endpoints\nexport const prerender = false;\n\n// Email templates\nconst emailTemplates: Record<Language, any> = {\n  es: {\n    toOwner: {\n      subject: (subject: string) => `Nuevo contacto: ${subject}`,\n      html: (data: ContactFormData) => `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">Nuevo mensaje de contacto</h2>\n          \n          <div style=\"background-color: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Datos del contacto:</h3>\n            <p><strong>Nombre:</strong> ${data.name}</p>\n            <p><strong>Email:</strong> ${data.email}</p>\n            <p><strong>Asunto:</strong> ${data.subject}</p>\n            ${data.budget ? `<p><strong>Presupuesto:</strong> ${data.budget}</p>` : ''}\n          </div>\n          \n          <div style=\"background-color: #fff; border-left: 4px solid #3b82f6; padding: 20px; margin: 20px 0;\">\n            <h3>Mensaje:</h3>\n            <p style=\"white-space: pre-wrap;\">${data.message}</p>\n          </div>\n          \n          <p style=\"color: #64748b; font-size: 14px;\">\n            Este mensaje fue enviado desde el formulario de contacto de tu portfolio.\n          </p>\n        </div>\n      `\n    },\n    toSender: {\n      subject: 'Confirmación: Hemos recibido tu mensaje',\n      html: (name: string) => `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">¡Gracias por contactarme!</h2>\n          \n          <p>Hola ${name},</p>\n          \n          <p>He recibido tu mensaje y me pondré en contacto contigo muy pronto. Generalmente respondo dentro de las 24 horas.</p>\n          \n          <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #1e40af;\">¿Qué sigue ahora?</h3>\n            <ul>\n              <li>Revisaré tu mensaje cuidadosamente</li>\n              <li>Te responderé con una propuesta detallada</li>\n              <li>Programaremos una llamada si es necesario</li>\n            </ul>\n          </div>\n          \n          <p>Mientras tanto, puedes:</p>\n          <ul>\n            <li>Revisar mis proyectos en <a href=\"https://github.com/martin-dev\">GitHub</a></li>\n            <li>Conectar conmigo en <a href=\"https://linkedin.com/in/martin-dev\">LinkedIn</a></li>\n            <li>Seguirme en redes sociales</li>\n          </ul>\n          \n          <p>¡Espero trabajar contigo pronto!</p>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px;\">\n            <p><strong>Martin</strong><br>\n            Desarrollador Full Stack & Diseñador UX/UI<br>\n            <a href=\"mailto:madezdev@gmail.com\">madezdev@gmail.com</a></p>\n          </div>\n        </div>\n      `\n    }\n  },\n  en: {\n    toOwner: {\n      subject: (subject: string) => `New contact: ${subject}`,\n      html: (data: ContactFormData) => `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">New contact message</h2>\n          \n          <div style=\"background-color: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3>Contact details:</h3>\n            <p><strong>Name:</strong> ${data.name}</p>\n            <p><strong>Email:</strong> ${data.email}</p>\n            <p><strong>Subject:</strong> ${data.subject}</p>\n            ${data.budget ? `<p><strong>Budget:</strong> ${data.budget}</p>` : ''}\n          </div>\n          \n          <div style=\"background-color: #fff; border-left: 4px solid #3b82f6; padding: 20px; margin: 20px 0;\">\n            <h3>Message:</h3>\n            <p style=\"white-space: pre-wrap;\">${data.message}</p>\n          </div>\n          \n          <p style=\"color: #64748b; font-size: 14px;\">\n            This message was sent from your portfolio contact form.\n          </p>\n        </div>\n      `\n    },\n    toSender: {\n      subject: 'Confirmation: We received your message',\n      html: (name: string) => `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #3b82f6;\">Thank you for reaching out!</h2>\n          \n          <p>Hello ${name},</p>\n          \n          <p>I've received your message and will get back to you very soon. I typically respond within 24 hours.</p>\n          \n          <div style=\"background-color: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n            <h3 style=\"color: #1e40af;\">What happens next?</h3>\n            <ul>\n              <li>I'll review your message carefully</li>\n              <li>I'll respond with a detailed proposal</li>\n              <li>We'll schedule a call if needed</li>\n            </ul>\n          </div>\n          \n          <p>In the meantime, you can:</p>\n          <ul>\n            <li>Check out my projects on <a href=\"https://github.com/martin-dev\">GitHub</a></li>\n            <li>Connect with me on <a href=\"https://linkedin.com/in/martin-dev\">LinkedIn</a></li>\n            <li>Follow me on social media</li>\n          </ul>\n          \n          <p>Looking forward to working with you!</p>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; margin-top: 30px;\">\n            <p><strong>Martin</strong><br>\n            Full Stack Developer & UX/UI Designer<br>\n            <a href=\"mailto:madezdev@gmail.com\">madezdev@gmail.com</a></p>\n          </div>\n        </div>\n      `\n    }\n  }\n};\n\nexport const POST: APIRoute = async ({ request }) => {\n  console.log('Contact API called at:', new Date().toISOString());\n  \n  try {\n    // Parse JSON from request body\n    const formData = await request.json() as ContactFormData;\n    console.log('Form data received:', { \n      name: formData.name, \n      email: formData.email, \n      hasSubject: !!formData.subject, \n      hasMessage: !!formData.message \n    });\n    \n    // Validate required fields\n    if (!formData.name || !formData.email || !formData.message) {\n      console.log('Validation failed - missing required fields');\n      return new Response(\n        JSON.stringify({\n          success: false,\n          message: 'Missing required fields'\n        }), \n        { status: 400 }\n      );\n    }\n\n    // Get environment variables\n    const emailUser = process.env.EMAIL_USER;\n    const emailPassword = process.env.EMAIL_PASSWORD;\n    \n    console.log('Environment variables check:', { \n      userPresent: !!emailUser, \n      passPresent: !!emailPassword,\n      passLength: emailPassword?.length,\n      nodeEnv: process.env.NODE_ENV\n    });\n    \n    if (!emailUser || !emailPassword) {\n      console.error('Email credentials not configured', {\n        userEnv: process.env.EMAIL_USER ? 'SET' : 'MISSING',\n        passEnv: process.env.EMAIL_PASSWORD ? 'SET' : 'MISSING'\n      });\n      return new Response(\n        JSON.stringify({\n          success: false,\n          message: 'Email service not configured'\n        }),\n        { status: 500 }\n      );\n    }\n\n    // Create transporter\n    console.log('Creating nodemailer transporter...');\n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: emailUser,\n        pass: emailPassword\n      }\n    });\n    console.log('Transporter created successfully');\n\n    // Use default language 'es' if the provided language is not valid\n    const language: Language = (formData.language && (formData.language === 'es' || formData.language === 'en')) \n      ? formData.language \n      : 'es';\n    const templates = emailTemplates[language];\n\n    // Email to owner (you)\n    const ownerMailOptions = {\n      from: emailUser,\n      to: 'madezdev@gmail.com',\n      subject: templates.toOwner.subject(formData.subject),\n      html: templates.toOwner.html(formData),\n      replyTo: formData.email\n    };\n\n    // Confirmation email to sender\n    const senderMailOptions = {\n      from: emailUser,\n      to: formData.email,\n      subject: templates.toSender.subject,\n      html: templates.toSender.html(formData.name)\n    };\n\n    // Send emails\n    console.log('Attempting to send emails...');\n    await Promise.all([\n      transporter.sendMail(ownerMailOptions),\n      transporter.sendMail(senderMailOptions)\n    ]);\n    console.log('Emails sent successfully');\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        message: 'Emails sent successfully'\n      }),\n      { \n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      }\n    );\n\n  } catch (error) {\n    console.error('Email sending error:', error);\n    \n    // More specific error handling\n    let errorMessage = 'Failed to send email';\n    if (error instanceof Error) {\n      errorMessage = error.message;\n      console.error('Error details:', {\n        message: error.message,\n        stack: error.stack,\n        name: error.name\n      });\n    }\n    \n    return new Response(\n      JSON.stringify({\n        success: false,\n        message: errorMessage,\n        error: process.env.NODE_ENV === 'development' ? String(error) : undefined\n      }),\n      { \n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      }\n    );\n  }\n};\n\n// Handle OPTIONS requests for CORS preflight\nexport const OPTIONS: APIRoute = async () => {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type'\n    }\n  });\n};"],"names":[],"mappings":"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"}